type AggregateExercise {
  count: Int!
}

type AggregateLift {
  count: Int!
}

type AggregateMember {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Exercise {
  id: ID!
  name: String!
  author: Member!
  weight: String
  lifts(where: LiftWhereInput, orderBy: LiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lift!]
  notes: String
  createdAt: DateTime!
  updatedAt: DateTime
}

type ExerciseConnection {
  pageInfo: PageInfo!
  edges: [ExerciseEdge]!
  aggregate: AggregateExercise!
}

input ExerciseCreateInput {
  id: ID
  name: String!
  author: MemberCreateOneWithoutExercisesInput!
  weight: String
  lifts: LiftCreateManyWithoutExerciseInput
  notes: String
}

input ExerciseCreateManyWithoutAuthorInput {
  create: [ExerciseCreateWithoutAuthorInput!]
  connect: [ExerciseWhereUniqueInput!]
}

input ExerciseCreateOneWithoutLiftsInput {
  create: ExerciseCreateWithoutLiftsInput
  connect: ExerciseWhereUniqueInput
}

input ExerciseCreateWithoutAuthorInput {
  id: ID
  name: String!
  weight: String
  lifts: LiftCreateManyWithoutExerciseInput
  notes: String
}

input ExerciseCreateWithoutLiftsInput {
  id: ID
  name: String!
  author: MemberCreateOneWithoutExercisesInput!
  weight: String
  notes: String
}

type ExerciseEdge {
  node: Exercise!
  cursor: String!
}

enum ExerciseOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  weight_ASC
  weight_DESC
  notes_ASC
  notes_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ExercisePreviousValues {
  id: ID!
  name: String!
  weight: String
  notes: String
  createdAt: DateTime!
  updatedAt: DateTime
}

input ExerciseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  weight: String
  weight_not: String
  weight_in: [String!]
  weight_not_in: [String!]
  weight_lt: String
  weight_lte: String
  weight_gt: String
  weight_gte: String
  weight_contains: String
  weight_not_contains: String
  weight_starts_with: String
  weight_not_starts_with: String
  weight_ends_with: String
  weight_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ExerciseScalarWhereInput!]
  OR: [ExerciseScalarWhereInput!]
  NOT: [ExerciseScalarWhereInput!]
}

type ExerciseSubscriptionPayload {
  mutation: MutationType!
  node: Exercise
  updatedFields: [String!]
  previousValues: ExercisePreviousValues
}

input ExerciseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExerciseWhereInput
  AND: [ExerciseSubscriptionWhereInput!]
  OR: [ExerciseSubscriptionWhereInput!]
  NOT: [ExerciseSubscriptionWhereInput!]
}

input ExerciseUpdateInput {
  name: String
  author: MemberUpdateOneRequiredWithoutExercisesInput
  weight: String
  lifts: LiftUpdateManyWithoutExerciseInput
  notes: String
}

input ExerciseUpdateManyDataInput {
  name: String
  weight: String
  notes: String
}

input ExerciseUpdateManyMutationInput {
  name: String
  weight: String
  notes: String
}

input ExerciseUpdateManyWithoutAuthorInput {
  create: [ExerciseCreateWithoutAuthorInput!]
  delete: [ExerciseWhereUniqueInput!]
  connect: [ExerciseWhereUniqueInput!]
  set: [ExerciseWhereUniqueInput!]
  disconnect: [ExerciseWhereUniqueInput!]
  update: [ExerciseUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ExerciseUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [ExerciseScalarWhereInput!]
  updateMany: [ExerciseUpdateManyWithWhereNestedInput!]
}

input ExerciseUpdateManyWithWhereNestedInput {
  where: ExerciseScalarWhereInput!
  data: ExerciseUpdateManyDataInput!
}

input ExerciseUpdateOneWithoutLiftsInput {
  create: ExerciseCreateWithoutLiftsInput
  update: ExerciseUpdateWithoutLiftsDataInput
  upsert: ExerciseUpsertWithoutLiftsInput
  delete: Boolean
  disconnect: Boolean
  connect: ExerciseWhereUniqueInput
}

input ExerciseUpdateWithoutAuthorDataInput {
  name: String
  weight: String
  lifts: LiftUpdateManyWithoutExerciseInput
  notes: String
}

input ExerciseUpdateWithoutLiftsDataInput {
  name: String
  author: MemberUpdateOneRequiredWithoutExercisesInput
  weight: String
  notes: String
}

input ExerciseUpdateWithWhereUniqueWithoutAuthorInput {
  where: ExerciseWhereUniqueInput!
  data: ExerciseUpdateWithoutAuthorDataInput!
}

input ExerciseUpsertWithoutLiftsInput {
  update: ExerciseUpdateWithoutLiftsDataInput!
  create: ExerciseCreateWithoutLiftsInput!
}

input ExerciseUpsertWithWhereUniqueWithoutAuthorInput {
  where: ExerciseWhereUniqueInput!
  update: ExerciseUpdateWithoutAuthorDataInput!
  create: ExerciseCreateWithoutAuthorInput!
}

input ExerciseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  author: MemberWhereInput
  weight: String
  weight_not: String
  weight_in: [String!]
  weight_not_in: [String!]
  weight_lt: String
  weight_lte: String
  weight_gt: String
  weight_gte: String
  weight_contains: String
  weight_not_contains: String
  weight_starts_with: String
  weight_not_starts_with: String
  weight_ends_with: String
  weight_not_ends_with: String
  lifts_every: LiftWhereInput
  lifts_some: LiftWhereInput
  lifts_none: LiftWhereInput
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ExerciseWhereInput!]
  OR: [ExerciseWhereInput!]
  NOT: [ExerciseWhereInput!]
}

input ExerciseWhereUniqueInput {
  id: ID
}

type Lift {
  id: ID!
  author: Member!
  exercise: Exercise
  weight: String
  score: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

type LiftConnection {
  pageInfo: PageInfo!
  edges: [LiftEdge]!
  aggregate: AggregateLift!
}

input LiftCreateInput {
  id: ID
  author: MemberCreateOneWithoutLiftsInput!
  exercise: ExerciseCreateOneWithoutLiftsInput
  weight: String
  score: String!
}

input LiftCreateManyWithoutAuthorInput {
  create: [LiftCreateWithoutAuthorInput!]
  connect: [LiftWhereUniqueInput!]
}

input LiftCreateManyWithoutExerciseInput {
  create: [LiftCreateWithoutExerciseInput!]
  connect: [LiftWhereUniqueInput!]
}

input LiftCreateWithoutAuthorInput {
  id: ID
  exercise: ExerciseCreateOneWithoutLiftsInput
  weight: String
  score: String!
}

input LiftCreateWithoutExerciseInput {
  id: ID
  author: MemberCreateOneWithoutLiftsInput!
  weight: String
  score: String!
}

type LiftEdge {
  node: Lift!
  cursor: String!
}

enum LiftOrderByInput {
  id_ASC
  id_DESC
  weight_ASC
  weight_DESC
  score_ASC
  score_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LiftPreviousValues {
  id: ID!
  weight: String
  score: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

input LiftScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  weight: String
  weight_not: String
  weight_in: [String!]
  weight_not_in: [String!]
  weight_lt: String
  weight_lte: String
  weight_gt: String
  weight_gte: String
  weight_contains: String
  weight_not_contains: String
  weight_starts_with: String
  weight_not_starts_with: String
  weight_ends_with: String
  weight_not_ends_with: String
  score: String
  score_not: String
  score_in: [String!]
  score_not_in: [String!]
  score_lt: String
  score_lte: String
  score_gt: String
  score_gte: String
  score_contains: String
  score_not_contains: String
  score_starts_with: String
  score_not_starts_with: String
  score_ends_with: String
  score_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LiftScalarWhereInput!]
  OR: [LiftScalarWhereInput!]
  NOT: [LiftScalarWhereInput!]
}

type LiftSubscriptionPayload {
  mutation: MutationType!
  node: Lift
  updatedFields: [String!]
  previousValues: LiftPreviousValues
}

input LiftSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LiftWhereInput
  AND: [LiftSubscriptionWhereInput!]
  OR: [LiftSubscriptionWhereInput!]
  NOT: [LiftSubscriptionWhereInput!]
}

input LiftUpdateInput {
  author: MemberUpdateOneRequiredWithoutLiftsInput
  exercise: ExerciseUpdateOneWithoutLiftsInput
  weight: String
  score: String
}

input LiftUpdateManyDataInput {
  weight: String
  score: String
}

input LiftUpdateManyMutationInput {
  weight: String
  score: String
}

input LiftUpdateManyWithoutAuthorInput {
  create: [LiftCreateWithoutAuthorInput!]
  delete: [LiftWhereUniqueInput!]
  connect: [LiftWhereUniqueInput!]
  set: [LiftWhereUniqueInput!]
  disconnect: [LiftWhereUniqueInput!]
  update: [LiftUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [LiftUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [LiftScalarWhereInput!]
  updateMany: [LiftUpdateManyWithWhereNestedInput!]
}

input LiftUpdateManyWithoutExerciseInput {
  create: [LiftCreateWithoutExerciseInput!]
  delete: [LiftWhereUniqueInput!]
  connect: [LiftWhereUniqueInput!]
  set: [LiftWhereUniqueInput!]
  disconnect: [LiftWhereUniqueInput!]
  update: [LiftUpdateWithWhereUniqueWithoutExerciseInput!]
  upsert: [LiftUpsertWithWhereUniqueWithoutExerciseInput!]
  deleteMany: [LiftScalarWhereInput!]
  updateMany: [LiftUpdateManyWithWhereNestedInput!]
}

input LiftUpdateManyWithWhereNestedInput {
  where: LiftScalarWhereInput!
  data: LiftUpdateManyDataInput!
}

input LiftUpdateWithoutAuthorDataInput {
  exercise: ExerciseUpdateOneWithoutLiftsInput
  weight: String
  score: String
}

input LiftUpdateWithoutExerciseDataInput {
  author: MemberUpdateOneRequiredWithoutLiftsInput
  weight: String
  score: String
}

input LiftUpdateWithWhereUniqueWithoutAuthorInput {
  where: LiftWhereUniqueInput!
  data: LiftUpdateWithoutAuthorDataInput!
}

input LiftUpdateWithWhereUniqueWithoutExerciseInput {
  where: LiftWhereUniqueInput!
  data: LiftUpdateWithoutExerciseDataInput!
}

input LiftUpsertWithWhereUniqueWithoutAuthorInput {
  where: LiftWhereUniqueInput!
  update: LiftUpdateWithoutAuthorDataInput!
  create: LiftCreateWithoutAuthorInput!
}

input LiftUpsertWithWhereUniqueWithoutExerciseInput {
  where: LiftWhereUniqueInput!
  update: LiftUpdateWithoutExerciseDataInput!
  create: LiftCreateWithoutExerciseInput!
}

input LiftWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  author: MemberWhereInput
  exercise: ExerciseWhereInput
  weight: String
  weight_not: String
  weight_in: [String!]
  weight_not_in: [String!]
  weight_lt: String
  weight_lte: String
  weight_gt: String
  weight_gte: String
  weight_contains: String
  weight_not_contains: String
  weight_starts_with: String
  weight_not_starts_with: String
  weight_ends_with: String
  weight_not_ends_with: String
  score: String
  score_not: String
  score_in: [String!]
  score_not_in: [String!]
  score_lt: String
  score_lte: String
  score_gt: String
  score_gte: String
  score_contains: String
  score_not_contains: String
  score_starts_with: String
  score_not_starts_with: String
  score_ends_with: String
  score_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LiftWhereInput!]
  OR: [LiftWhereInput!]
  NOT: [LiftWhereInput!]
}

input LiftWhereUniqueInput {
  id: ID
}

scalar Long

type Member {
  id: ID!
  displayName: String!
  avatar: String
  email: String!
  password: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise!]
  lifts(where: LiftWhereInput, orderBy: LiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lift!]
  createdAt: DateTime!
  updatedAt: DateTime
}

type MemberConnection {
  pageInfo: PageInfo!
  edges: [MemberEdge]!
  aggregate: AggregateMember!
}

input MemberCreateInput {
  id: ID
  displayName: String!
  avatar: String
  email: String!
  password: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  exercises: ExerciseCreateManyWithoutAuthorInput
  lifts: LiftCreateManyWithoutAuthorInput
}

input MemberCreateOneWithoutExercisesInput {
  create: MemberCreateWithoutExercisesInput
  connect: MemberWhereUniqueInput
}

input MemberCreateOneWithoutLiftsInput {
  create: MemberCreateWithoutLiftsInput
  connect: MemberWhereUniqueInput
}

input MemberCreateWithoutExercisesInput {
  id: ID
  displayName: String!
  avatar: String
  email: String!
  password: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  lifts: LiftCreateManyWithoutAuthorInput
}

input MemberCreateWithoutLiftsInput {
  id: ID
  displayName: String!
  avatar: String
  email: String!
  password: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  exercises: ExerciseCreateManyWithoutAuthorInput
}

type MemberEdge {
  node: Member!
  cursor: String!
}

enum MemberOrderByInput {
  id_ASC
  id_DESC
  displayName_ASC
  displayName_DESC
  avatar_ASC
  avatar_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MemberPreviousValues {
  id: ID!
  displayName: String!
  avatar: String
  email: String!
  password: String!
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  createdAt: DateTime!
  updatedAt: DateTime
}

type MemberSubscriptionPayload {
  mutation: MutationType!
  node: Member
  updatedFields: [String!]
  previousValues: MemberPreviousValues
}

input MemberSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MemberWhereInput
  AND: [MemberSubscriptionWhereInput!]
  OR: [MemberSubscriptionWhereInput!]
  NOT: [MemberSubscriptionWhereInput!]
}

input MemberUpdateInput {
  displayName: String
  avatar: String
  email: String
  password: String
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  exercises: ExerciseUpdateManyWithoutAuthorInput
  lifts: LiftUpdateManyWithoutAuthorInput
}

input MemberUpdateManyMutationInput {
  displayName: String
  avatar: String
  email: String
  password: String
  role: Role
  resetToken: String
  resetTokenExpiry: Float
}

input MemberUpdateOneRequiredWithoutExercisesInput {
  create: MemberCreateWithoutExercisesInput
  update: MemberUpdateWithoutExercisesDataInput
  upsert: MemberUpsertWithoutExercisesInput
  connect: MemberWhereUniqueInput
}

input MemberUpdateOneRequiredWithoutLiftsInput {
  create: MemberCreateWithoutLiftsInput
  update: MemberUpdateWithoutLiftsDataInput
  upsert: MemberUpsertWithoutLiftsInput
  connect: MemberWhereUniqueInput
}

input MemberUpdateWithoutExercisesDataInput {
  displayName: String
  avatar: String
  email: String
  password: String
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  lifts: LiftUpdateManyWithoutAuthorInput
}

input MemberUpdateWithoutLiftsDataInput {
  displayName: String
  avatar: String
  email: String
  password: String
  role: Role
  resetToken: String
  resetTokenExpiry: Float
  exercises: ExerciseUpdateManyWithoutAuthorInput
}

input MemberUpsertWithoutExercisesInput {
  update: MemberUpdateWithoutExercisesDataInput!
  create: MemberCreateWithoutExercisesInput!
}

input MemberUpsertWithoutLiftsInput {
  update: MemberUpdateWithoutLiftsDataInput!
  create: MemberCreateWithoutLiftsInput!
}

input MemberWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  displayName: String
  displayName_not: String
  displayName_in: [String!]
  displayName_not_in: [String!]
  displayName_lt: String
  displayName_lte: String
  displayName_gt: String
  displayName_gte: String
  displayName_contains: String
  displayName_not_contains: String
  displayName_starts_with: String
  displayName_not_starts_with: String
  displayName_ends_with: String
  displayName_not_ends_with: String
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  exercises_every: ExerciseWhereInput
  exercises_some: ExerciseWhereInput
  exercises_none: ExerciseWhereInput
  lifts_every: LiftWhereInput
  lifts_some: LiftWhereInput
  lifts_none: LiftWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
}

input MemberWhereUniqueInput {
  id: ID
  email: String
}

type Mutation {
  createExercise(data: ExerciseCreateInput!): Exercise!
  updateExercise(data: ExerciseUpdateInput!, where: ExerciseWhereUniqueInput!): Exercise
  updateManyExercises(data: ExerciseUpdateManyMutationInput!, where: ExerciseWhereInput): BatchPayload!
  upsertExercise(where: ExerciseWhereUniqueInput!, create: ExerciseCreateInput!, update: ExerciseUpdateInput!): Exercise!
  deleteExercise(where: ExerciseWhereUniqueInput!): Exercise
  deleteManyExercises(where: ExerciseWhereInput): BatchPayload!
  createLift(data: LiftCreateInput!): Lift!
  updateLift(data: LiftUpdateInput!, where: LiftWhereUniqueInput!): Lift
  updateManyLifts(data: LiftUpdateManyMutationInput!, where: LiftWhereInput): BatchPayload!
  upsertLift(where: LiftWhereUniqueInput!, create: LiftCreateInput!, update: LiftUpdateInput!): Lift!
  deleteLift(where: LiftWhereUniqueInput!): Lift
  deleteManyLifts(where: LiftWhereInput): BatchPayload!
  createMember(data: MemberCreateInput!): Member!
  updateMember(data: MemberUpdateInput!, where: MemberWhereUniqueInput!): Member
  updateManyMembers(data: MemberUpdateManyMutationInput!, where: MemberWhereInput): BatchPayload!
  upsertMember(where: MemberWhereUniqueInput!, create: MemberCreateInput!, update: MemberUpdateInput!): Member!
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteManyMembers(where: MemberWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  exercise(where: ExerciseWhereUniqueInput!): Exercise
  exercises(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Exercise]!
  exercisesConnection(where: ExerciseWhereInput, orderBy: ExerciseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExerciseConnection!
  lift(where: LiftWhereUniqueInput!): Lift
  lifts(where: LiftWhereInput, orderBy: LiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lift]!
  liftsConnection(where: LiftWhereInput, orderBy: LiftOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LiftConnection!
  member(where: MemberWhereUniqueInput!): Member
  members(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Member]!
  membersConnection(where: MemberWhereInput, orderBy: MemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MemberConnection!
  node(id: ID!): Node
}

enum Role {
  Admin
  Editor
  Moderator
  Member
  LiteMember
}

type Subscription {
  exercise(where: ExerciseSubscriptionWhereInput): ExerciseSubscriptionPayload
  lift(where: LiftSubscriptionWhereInput): LiftSubscriptionPayload
  member(where: MemberSubscriptionWhereInput): MemberSubscriptionPayload
}
